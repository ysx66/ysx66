name: Rockchip固件

on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron: 0 20 * * *
  watch:
     types: started

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: configs/feeds.conf.default
  CONFIG_FILE: configs/r2s
  DIY_P1_SH: configs/diy-part1.sh
  DIY_P2_SH: configs/diy-part2.sh
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  FILE_NAME: Rockchip
  PRODUCT_NAME: Rockchip

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main
      
    - name: Check server configuration
      run: |
        echo "警告⚠"
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo "已知编译成功CPU型号：8370C,8171M"
        echo "已知性能不足CPU型号：8272CL"
        echo -e "-------------- ------------CPU信息------------------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "-------------------------------内存信息-------------------------------------------"
        echo "已安装内存详细信息："
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo "-----------------------------硬盘信息---------------------------------------------"
        echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "硬盘详情："
        df -Th

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL https://raw.githubusercontent.com/ysx88/ysx88/main/assets/ubuntu2204-make-openwrt-depends)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
    - name: Initialization Values
      run: |
        export OWRT_TYPE=$(sed -n "1{s/^#//;s/\r$//;p;q}" configs/Rockchip.txt)

        echo "OWRT_TYPE=$OWRT_TYPE" >> $GITHUB_ENV

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DEVICE_NAME=_rockchip-armv8" >> $GITHUB_ENV
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Organize files
      id: organize
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        rm -rf config.buildinfo
        rm -rf feeds.buildinfo
        rm -rf profiles.json
        rm -rf sha256sums
        rm -rf version.buildinfo
        rm -rf openwrt-rockchip-armv8.manifest
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d")" >> $GITHUB_OUTPUT
        echo "release_date=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "这是个平台固件包，内含多个设备！
              请注意选择你需要的设备固件！
              
              平台：Rockchip
              设备：R2C R2S R4S R5C R5S R6S R66S R68S H66K H68K H69K
              密码：password
              地址：192.168.1.1" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        name: ${{ env.FILE_NAME }} ❤️ ${{ env.DATE }}
        tag_name: ${{ env.FILE_NAME }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
        
    - name: Telegram notification
      run: |
        MSG="
        🌺${{ env.PRODUCT_NAME }}编译完成
        ✪ ✣ ✤ ✥ ✦ ❉ ❦ ❧ ❃ ❂ ❁ ❀
        📍: https://github.com/ysx88/OpenWrt/releases/tag/${{ env.PRODUCT_NAME }}
        "
        curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=${MSG}"
